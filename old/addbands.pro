;; uses the spatial heterogenaity to add a band for each existing band.  Creates a new band where ;;	each value is the std. dev. of the surrounding srch pixels.  ;;;;	assumes BSQ;;	defaults to bytepro addbands, imgfile, ns, nl, nb, outimg, srch=srch, type=type	if (not keyword_set(srch)) then srch=3	if (not keyword_set(type)) then type = 1	if srch mod 2 eq 0 then srch = srch+1	;;ensures that we will search an odd area						;;so the result will be centered	nns=ns-srch+1	nnl=nl-srch+1	img = make_array(ns, srch, type=type)	dev = fltarr(nns)	nextline = make_array(ns, type=type)	mx=0.	mn=0.		openr, un, /get, imgfile	openw, oun, /get, STRING(outimg + '.tmp')	readu, un, img	for i=0, nb-1 do begin	for j=0, nnl-1 do begin		for k=0, nns-1 do begin		dev(k) = stddev(img(k:k+srch-1, *))		mx=MAX([MAX(dev), mx])		mn=MIN([MIN(dev), mn])	endfor		writeu, oun, dev		readu, un, nextline	img(*,(j mod srch)) = nextline	if j mod 200 eq 0 then print, j	endfor	endfor;;sets dev values range from zero to one, though zero doesn't mean zero deviation!;;	dev(*,*,k) = (dev(*,*,k) - MIN(dev(*,*,k)));;	dev(*,*,k) = dev(*,*,k)/ MAX(dev(*,*,k));;	print, k;;	endfor		print, nns, nnl	close, un, oun	free_lun, un, oun		openr, imgun, /get, imgfile	for i=0, (srch/2)-1 do begin		readu, imgun, nextline	endfor	openw, oun, /get, outimg	for i=0, nb-1 do begin	for j=0, nnl-1 do begin		readu, imgun, nextline		writeu, oun, FIX(nextline((srch/2):ns-(srch/2)-1))	endfor	endfor	close, imgun	free_lun, imgun	openr, devun, /get, STRING(outimg + '.tmp')	for i=0, nb-1 do begin	for j=0, nnl-1 do begin		readu, devun, dev		writeu, oun, FIX((dev-mn)/mx * 10000)	endfor	endfor	close, devun, oun	free_lun, oun		end