;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads an enviheader file.  ;;	    returns a struct :;;		    ns:number of samples in the file;;		    nl:number of lines in the file;;		    nb:number of bands in the file;;		    map: an envi map structure (includes utm coords and pixelsize);;		    desc: The description field in the .hdr;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getFileInfo, name	 envi_open_file, name, r_fid=id	 	 if id eq -1 then return, {errorstruct, name:name, ns:-1, nl:-1, nb:-1}	 envi_file_query, id, nb=nb, nl=nl, ns=ns, h_map=maph, descrip=desc, $	 	interleave=interleave, data_type=type	 handle_value, maph, map	 envi_file_mng, id=id, /remove	 return, {imagestruct, name:name, ns:ns, nl:nl, nb:nb, map:map, desc:desc, $	 	interleave:interleave, type:type}end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Sets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro setsandHdr, info, fname	envi_setup_head, fname=fname, ns=info.ns, nl=info.nl, nb=info.nb, $		interleave=info.interleave, data_type=info.type, $		descrip=info.desc, map_info=info.map, /writeend	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Finds the offsets in number of pixels between two images;;	note, this offset can be negative!;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function calcOffset, im1, im2 	 xoff=(im1.map.mc(2) - im2.map.mc(2))/im2.map.ps(0)	 yoff=(im2.map.mc(3) - im1.map.mc(3))/im2.map.ps(1)	 ratio = im2.map.ps(0) / im1.map.ps(0)	 	 return, {offsetstruct, x:fix(xoff), y:fix(yoff), factor:ratio}endpro sandmodel, veg, wind, output	v_info=getFileInfo(veg)	w_info=getFileInfo(wind)	v_w_off=calcOffset(v_info, w_info)	print, v_w_off	if file_test(veg) then print, veg, ' is the vegetation file begin used';;I think that because of the way this program is setup we can't handle a negative offset	if v_w_off.x lt 0 or v_w_off.y lt 0 then begin		print, 'Offset Error', v_w_off		return	endif	w_line=fltarr(w_info.ns)	v_line=bytarr(v_info.ns)	q_line=fltarr(v_info.ns)		openr, vun, /get, veg	openr, wun, /get, wind	openw, qun, /get, output	for i=0, v_w_off.y do readu, wun, w_line	for i=0, v_info.nl-1 do begin		readu, vun, v_line		if i mod v_w_off.factor eq 0 and not eof(wun) then $			readu, wun, w_line;;		v_index = where(v_line ne 0)                v_index=indgen(n_elements(v_line))		if v_index(0) ne -1 then begin			w_index = fix((v_index / v_w_off.factor) + v_w_off.x);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Q=300*(abs(U*-Ut*)^3) * 2.717^(-25veg);;;;	Ut*=0.3		fluid threshold for sand with diameter = 0.5mm;;	U* = 0.4/ln(Z/Zo)  * Wind(z);;	Zo = 0.0005m	approximate Zo for a moderately smooth surface;;				note, in vegetated areas Zo = 0.075 * Lc??? (lancaster 1999);;	Z  = 10m 	not specified in weather data, taken from www.punchdown.org/rvb/wind/karen/kth-methods.htm;;				need "United States Air Force Environmental Technical Application Center, ;;					Climatic Database Users Handbook No. 4, DATSAV2 Surface (Unclassified), ;;					December 1986, USAFETAC/UH-86/004";;	0.4/ln(10m/0.0005m) = 0.04;;	thus U* = 0.04 * Wind;;;;	veg = %cover Å Lateral cover = 4/¹ * AR * %cover;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;			q_line(v_index) = 300*((w_line(w_index)*0.04-0.3)^3) * 2.717^(-25*((v_line(v_index))/100.))			no_movement=where(q_line lt 0)			if no_movement(0) ne -1 then q_line(no_movement) = 0l		endif;;this is the if statement to check for veg or not		index = where(q_line gt 10000)		if index(0) ne -1 then q_line(index) = 10001		writeu, qun, q_line		q_line(*) = 0.	endfor	close, vun, wun, qun	free_lun, vun, wun, qun		v_info.type=4	setsandHdr, v_info, outputend