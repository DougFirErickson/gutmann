;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads an enviheader file.  ;;	    returns a struct :;;		    ns:number of samples in the file;;		    nl:number of lines in the file;;		    nb:number of bands in the file;;		    map: an envi map structure (includes utm coords and pixelsize);;		    desc: The description field in the .hdr;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getFileInfo, name	 envi_open_file, name, r_fid=id	 	 if id eq -1 then return, {errorstruct, name:name, ns:-1, nl:-1, nb:-1}	 envi_file_query, id, nb=nb, nl=nl, ns=ns, h_map=maph, descrip=desc, $	 	interleave=interleave, data_type=type	 if maph eq -1 then return, {errorstruct, name:name, ns:-1, nl:-1, nb:-1}	 	 handle_value, maph, map	 envi_file_mng, id=id, /remove	 return, {imagestruct, name:name, ns:ns, nl:nl, nb:nb, map:map, desc:desc, $	 	interleave:interleave, type:type}end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Sets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro setHdr, info, fname	envi_setup_head, fname=fname, ns=info.ns, nl=info.nl, nb=info.nb, $		interleave=info.interleave, data_type=info.type, $		descrip=info.desc, map_info=info.map, /writeendpro correctvegmap, classFile, corrFile, oldvegFile, NDVIfile, fullMask, outFile	envistart	cols=load_cols(corrFile, coeff)	if cols eq -1 then begin		res = move(oldvegFile, outfile, /copy)		print, 'ERROR correcting ',oldvegFile		return	endif		index = where((coeff(1,*) le 0) or (coeff(2,*) le 0.15))		if index(0) eq -1 then begin		res = move(oldvegFile, outfile, /copy)		res = move(oldvegFile+'.hdr', outfile+'.hdr', /copy)		print, 'nothing to Correct in, ', oldvegFile		return	endif		ClassInfo=getFileInfo(classFile)	oldVInfo =getFileInfo(oldvegFile)	NDVIInfo =getFileInfo(NDVIfile)		if oldVInfo.ns ne NDVIInfo.ns or NDVIInfo.ns ne ClassInfo.ns then begin		res = move(oldvegFile, outfile, /copy)		print, 'Invalid file sizes, '		print, oldVInfo, NDVIInfo, ClassInfo		return	endif	if oldVInfo.nl ne NDVIInfo.nl or NDVIInfo.nl ne ClassInfo.nl then begin		res = move(oldvegFile, outfile, /copy)		print, 'Invalid file sizes, '		print, oldVInfo, NDVIInfo, ClassInfo		return	endif		tmpVeg = 'TEMPORARYVEG'	ndviToVeg, NDVIfile, tmpVeg, fullMask		openr, cun, classFile, /get	openr, ovun, oldvegFile, /get	openr, tvun, tmpVeg, /get	openw, oun, outFile, /get	print, 'Making corrections', outFile	cline = make_array(ClassInfo.ns*10, type=ClassInfo.type)	ovline = make_array(ClassInfo.ns*10, type=oldVInfo.type)	tvline = bytarr(ClassInfo.ns*10)		for j=0, (ClassInfo.nl/10)-1 do begin		readu, cun, cline		readu, ovun, ovline		readu, tvun, tvline					for i=0, n_elements(index)-1 do begin			line_index = where(cline eq (index(i)+1))			if line_index(0) ne -1 then $				ovline(line_index) = tvline(line_index)		endfor				writeu, oun, ovline		endfor		if ClassInfo.nl mod 10 gt 0 then begin		cline = make_array(ClassInfo.ns * (ClassInfo.nl mod 10), type=ClassInfo.type)		ovline = make_array(ClassInfo.ns * (ClassInfo.nl mod 10), type=oldVInfo.type)		tvline = bytarr(ClassInfo.ns * (ClassInfo.nl mod 10))		readu, cun, cline		readu, ovun, ovline		readu, tvun, tvline					for i=0, n_elements(index)-1 do begin			line_index = where(cline eq (index(i)+1))			if line_index(0) ne -1 then $				ovline(line_index) = tvline(line_index)		endfor				writeu, oun, ovline	endif		close, oun, cun, ovun, tvun	free_lun, oun, cun, ovun, tvun		sethdr, oldVInfo, outFile;	if file_test(tmpveg) then file_delete, tmpVegend