;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads in a line of text and returns it as a string;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function readfilename, unit	s=''	readf, unit, s	sepstring=str_sep(s, ' ')	redstring=sepstring(where(sepstring ne ''))		reads, redstring(0), tmp	data(0)=tmp	n=n_elements(redstring)	for i=n-14, n-1 do begin		reads, redstring(i), tmp		data(i-n+15) = tmp	end	return, dataend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the number of century points/files from the first line;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getpoints, unit	points=0	s=''	readf, unit, s	reads, s, points	return, pointsend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the names of century points/files from the first column;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getnames, unit, points, daycent=daycent  print, 'hi'  if keyword_set(daycent) then suffix='.out' else suffix='.lis'  print, suffix	names=strarr(points)	s=''	for i=0, points-1 do begin		readf, unit, s		sepstr=str_sep(s, ' ')		names[i]=sepstr[0]+suffix	endfor	return, namesend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the locations of century points/files from column 2/3;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getloc, unit, points	locs=fltarr(points, 2)	tmploc=0.	s='';;this restores the file pointer to the begining of the useful info	point_lun, unit, 0	readf, unit, s	for i=0, points-1 do begin		readf, unit, s		sepstr=str_sep(s, ' ')		redstr=sepstr(where(sepstr ne ''))		reads, redstr(1), tmploc		locs(i,0)=Fix(tmploc / 100) + (tmploc mod 100) /60		reads, redstr(2), tmploc		locs(i,1)=Fix(tmploc / 100) + (tmploc mod 100) /60	endfor	return, locsend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads century data from files specified in the meta file;;	returns a 3xNpointsx240 (240=20yrs*12mo [optionally *5 weeks]) floating point array;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getdata, names, npoints, lastdate, daycent=daycent  print, names  if keyword_set(daycent) then  length=240*5 else length = 240    data=fltarr(3,npoints,length)	for i=0, npoints-1 do begin		jnk=load_cols(names[i], dat)		s=size(dat)		if dat[0,n_elements(dat[0,*])-1] lt lastdate then begin			print, 'ERROR, ', names[i]			print, 'Century data does not cover necessary time frame'                        print, 'last NDVI date =',lastdate, $                          ' lastcentury date =', dat[0,n_elements(dat[0,*])-1]		endif else begin                   data[*,i,*] = dat[0:2,(s[2]-length):s[2]-1]		endelse	endfor		return, dataend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes a series of lat long coordinates and converts them;;	to UTM Zone 14 coordinates with the builtin envi routine;;	ENVI_CONVERT_PROJECTION_COORDINATES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function convertLLtoUTM, locations, zone  FORWARD_FUNCTION envi_translate_projection_units, envi_proj_create  if n_elements(zone) eq 0 then zone=14	s=size(locations)	locations(*,1)=locations(*,1)*(-1)	units=envi_translate_projection_units('Degrees')	iproj=envi_proj_create(/geographic, units=units, datum='WGS-84')	units=envi_translate_projection_units('Meters')	oproj=envi_proj_create(/utm, units=units, datum='WGS-84', zone=zone)	envi_convert_projection_coordinates, locations(*,1), locations(*,0), iproj, $						newXmap, newYmap, oproj	map=fltarr(2, n_elements(newXmap))	map(0,*)=newXmap	map(1,*)=newYmap	return, mapend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes the name of an ENVI header file and finds the boundaries;;	in map coordinates.  Returns upperleft, lowerright corners;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function headerBounds, headerfile, zone	s=str_sep(headerfile, '.')	name=headerfile	if s(n_elements(s)-1) eq 'hdr' then begin		name=s(0)		if n_elements(s) gt 2 then $			for i=1, n_elements(s)-2 do begin				name=name+'.'+s(i)			endfor	endif			envi_open_file, name, r_fid=fid	if fid eq -1 then begin print, 'Bad Header File' &retall& endif	envi_file_query, fid, h_map=Hmapinfo, ns=ns, nl=nl, xstart=xstart, ystart=ystart	if Hmapinfo eq -1 then begin print, 'Bad Header File' & retall & endif	Handle_Value, Hmapinfo, mapinfo        zone=mapinfo.proj.params[0]	pixsz=mapinfo.ps;	left=(mapinfo.mc(0) + xstart )*pixsz(0)*(-1) + mapinfo.mc(2);	top=(mapinfo.mc(1) + ystart )*pixsz(1) + mapinfo.mc(3)	left=mapinfo.mc(2)	top=mapinfo.mc(3)	right=left+(ns*pixsz(0))	bottom=top-(nl*pixsz(1))	envi_file_mng, /remove, id=fid	return, [left, top, right, bottom, pixsz(0), pixsz(1)]end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes an array of dates, [[d,m,y], [d,m,y],...];;	and converts them into century dates (yr.);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function convertDatesToCent, dates, daycent=daycent	s=size(dates)        if keyword_set(daycent) then  final=fltarr(s[2], 2) else  final=fltarr(s[2],1);        print, datesfor i=0, s(2)-1 do begin		mo=dates(1,i);		if dates(0,i) lt 15 then mo=mo-1		final(i,0)=dates(2,i)+float(mo-1)/12;; daycent output is weekly, so we also need to set which week (1-5);; this occured during                if keyword_set(daycent) then $                   final[i,1]=(fix(dates[0,i]-1)/7) +1	endfor	tmp=round(final*100)	final=float(tmp)/100	return, finalend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads the name of an image file from a meta file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getheader, unit	s=''	readf, unit, s	return, send;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads dates from a meta file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getdates, unit, daycent=daycent	i=0	s=''	readf, unit, i	dates=intarr(3,i)	tmpdate=intarr(3)	for j=0, i-1 do begin		readf, unit, s		sep=strsplit(s, /extract)		tmp=0		reads, sep(0), tmp		dates(2,j)=tmp		reads, sep(1), tmp		dates(1,j)=tmp		reads, sep(2), tmp		dates(0,j)=tmp	endfor        return, convertDatesToCent(dates, daycent=daycent)end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Gets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getImageInfo, name	      envi_open_file, name, r_fid=id     if id eq -1 then return, -1     	envi_file_query, id, ns=ns, nl=nl, nb=nb, h_map=maph,	$		interleave=interleave, data_type=type, descrip=desc	handle_value, maph, mapinfo		envi_file_mng, id=id, /remove		return, {fileInfo, ns:ns, nl:nl, nb:nb, map:mapinfo,		$			interleave:interleave, type:type, desc:desc}end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Sets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro setCentHdr, info, fname, ps, windSize	info.map.ps = ps	info.ns=windSize[1]	info.nl=windSize[2]	info.type=windSize[3] 		envi_setup_head, fname=fname, ns=info.ns, nl=info.nl, nb=info.nb, $		interleave=info.interleave, data_type=info.type, $		descrip=info.desc, map_info=info.map, /writeend	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes a number of century output files and krigs them into a map;;	based on the hdr file of a landsat scene;;;;	dates is an array of dates (dd/mm/yy) (3 x years);;	metacent is a meta file that contains the number of century;;		points on the first line, and each successive line;;		has the name of a century file followed by the lat,long;;		of that century point;;	header is the name of an ENVI header fileto get map info from it;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro spatCent, metacent, withSTD=withSTD, daycent=daycent  envistart	openr, metaun, /get, metacent	openw, oun, /get, string(metacent+'.out')	npoints=getpoints(metaun)	names=getnames(metaun, npoints, daycent=daycent)	locations=getloc(metaun, npoints);	print, utmLoc	header=getheader(metaun)	bounds=headerBounds(header, zone)        print, 'Using UTM Zone : ', zone	utmLoc=convertLLtoUTM(locations, zone)	centdats=getdates(metaun, daycent=daycent)	z=fltarr(npoints)	print, 'Using Century Dates =', centdats	centdata=getdata(names, npoints, max(centdats), daycent=daycent)	e=[(bounds(2)-bounds(0)),0.5] 		flip=0		;; false	if bounds(1) gt bounds(3) then begin           realbounds=bounds           bounds(1) = bounds(3)           bounds(3) = realbounds(1)           flip=1	  ;;true	endif;	print, 'rotated ',flip,' =', bounds        gs=bounds(4:5)*2        ;*10;for tmp=0.1, 2, 0.1 do begin;	e(1)=tmp^2;	print, e        for i=0, n_elements(centdats[*,0])-1 do begin           for j=0, npoints-1 do begin              if keyword_set(daycent) then begin                 index = where((centdata[0,j,*] eq centdats[i,0]) $                               and (centdata[1,j,*] eq centdats[i,1]))                 if index[0] ne -1 then begin                    z[j] = centdata[2,j,index]                    if keyword_set(withStd) then $                      z[j]=z[j] + (centdata[3,j,index]/2)	;; stded                 endif              endif else begin                 index = where(centdata(0,j,*) eq centdats(i,0))                 if index(0) ne -1 then begin                    z(j)=centdata(1,j,index)	;; aglivc                    if keyword_set(withStd) then $                      z(j)=z(j) + (centdata(2,j,index)/2)	;; stded                 endif $                 else begin ;				print, 'Point ',j,' does not have complete century output'                    z(j) = 0                 endelse              endelse           endfor;		print, z           index=where(z ne 0 and z lt 10000000 and z ge 0)           if index(0) eq -1 then begin              print, 'ERROR, there were no valid century weather stations for this image!'              retall           endif                      print, 'Century Values = ', z(index)           print, 'Range and Nugget = ', e           print, 'Image Boundary = ',bounds[0:3]           print, 'Locations = ', utmLoc[*,index]           res= krig2d(z(index), transpose(utmLoc(0,index)), transpose(utmLoc(1,index)), gs=gs, bounds=bounds(0:3), spherical=e);		print, size(res)           if flip then res=rotate(res,7)	;;mirrors the image about the x-axis;;only use this line if we are running out of memory in ndvivcent.;		res=fix(res*100)           writeu, oun, res        endfor;endfor                close, oun, metaun        free_lun, oun, metaun        imgInfo = getImageInfo(header)        setCentHdr, imgInfo, string(metaCent+'.out'), gs, size(res)end