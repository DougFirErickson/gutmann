;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads in a line of text and returns it as a string;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function readfilename, unit	s=''	readf, unit, s	sepstring=str_sep(s, ' ')	redstring=sepstring(where(sepstring ne ''))		reads, redstring(0), tmp	data(0)=tmp	n=n_elements(redstring)	for i=n-14, n-1 do begin		reads, redstring(i), tmp		data(i-n+15) = tmp	end	return, dataend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the number of century points/files from the first line;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getpoints, unit	points=0	s=''	readf, unit, s	reads, s, points	return, pointsend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the names of century points/files from the first column;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getnames, unit, points	names=strarr(points)	s=''	for i=0, points-1 do begin		readf, unit, s		sepstr=str_sep(s, ' ')		names(i)=sepstr(0)	endfor	return, namesend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the locations of century points/files from column 2/3;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getloc, unit, points	locs=fltarr(points, 2)	tmploc=0.	s='';;this restores the file pointer to the begining of the useful info	point_lun, unit, 0	readf, unit, s	for i=0, points-1 do begin		readf, unit, s		sepstr=str_sep(s, ' ')		redstr=sepstr(where(sepstr ne ''))		reads, redstr(1), tmploc		locs(i,0)=Fix(tmploc / 100) + (tmploc mod 100) /60		reads, redstr(2), tmploc		locs(i,1)=Fix(tmploc / 100) + (tmploc mod 100) /60	endfor	return, locsend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads century data from files specified in the meta file;;	returns a 3xNpointsx240 (240=20yrs*12mo) floating point array;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getdata, names, npoints	data=fltarr(3,npoints,240)	for i=0, npoints-1 do begin		jnk=load_cols(names(i), dat)		s=size(dat)		data(*,i,*)=dat(*,s(2)-(240):s(2)-1)	endfor	return, dataend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes a series of lat long coordinates and converts them;;	to UTM Zone 14 coordinates with the builtin envi routine;;	ENVI_CONVERT_PROJECTION_COORDINATES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function convertLLtoUTM, locations	s=size(locations)	locations(*,1)=locations(*,1)*(-1)	units=envi_translate_projection_units('Degrees')	iproj=envi_proj_create(/geographic, units=units, datum='WGS-84')	units=envi_translate_projection_units('Meters')	oproj=envi_proj_create(/utm, units=units, datum='WGS-84', zone=14)	envi_convert_projection_coordinates, locations(*,1), locations(*,0), iproj, $						newXmap, newYmap, oproj	map=fltarr(2, n_elements(newXmap))	map(0,*)=newXmap	map(1,*)=newYmap	return, mapend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes the name of an ENVI header file and finds the boundaries;;	in map coordinates.  Returns upperleft, lowerright corners;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function headerBounds, headerfile	s=str_sep(headerfile, '.')	name=headerfile	if s(n_elements(s)-1) eq 'hdr' then begin		name=s(0)		if n_elements(s) gt 2 then $			for i=1, n_elements(s)-2 do begin				name=name+'.'+s(i)			endfor	endif			envi_open_file, name, r_fid=fid	if fid eq -1 then begin print, 'Bad Header File' & break & endif	envi_file_query, fid, h_map=Hmapinfo, ns=ns, nl=nl, xstart=xstart, ystart=ystart	if Hmapinfo eq -1 then begin print, 'Bad Header File' & break & endif	Handle_Value, Hmapinfo, mapinfo	pixsz=mapinfo.ps;	left=(mapinfo.mc(0) + xstart )*pixsz(0)*(-1) + mapinfo.mc(2);	top=(mapinfo.mc(1) + ystart )*pixsz(1) + mapinfo.mc(3)	left=mapinfo.mc(2)	top=mapinfo.mc(3)	right=left+(ns*pixsz(0))	bottom=top-(nl*pixsz(1))	envi_file_mng, /remove, id=fid	return, [left, top, right, bottom, pixsz(0), pixsz(1)]end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Writes an ENVI header approriate for to the output file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro setEnviHeader, headerfile, newimage, ns, nl, dt, nb, ps	s=str_sep(headerfile, '.')	name=headerfile	if s(n_elements(s)-1) eq 'hdr' then begin		name=s(0)		if n_elements(s) gt 2 then $			for i=1, n_elements(s)-2 do begin				name=name+'.'+s(i)			endfor	endif	envi_open_file, name, r_fid=fid	if fid eq -1 then begin print, 'Bad Header File' & break & endif	envi_file_query, fid, h_map=Hmapinfo, xstart=xstart, ystart=ystart	if Hmapinfo eq -1 then begin print, 'Bad Header File' & break & endif	Handle_Value, Hmapinfo, mapinfo	mapinfo.ps = ps	print, mapinfo.ps	envi_setup_head, fname=newimage, ns=ns, nl=nl, nb=nb, xstart=xstart, $		ystart=ystart, data_type=dt, map_info=mapinfo, interleave=0, r_fid=nfid,$		/write, /open	envi_file_mng, /remove, id=fid	envi_file_mng, /remove, id=nfidend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes an array of dates, [[d,m,y], [d,m,y],...];;	and converts them into century dates (yr.);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function convertDatesToCent, dates	s=size(dates)	if s(0) eq 2 then n_dates=s(2)-1 $	else n_dates = 0	final=fltarr(n_dates+1)	for i=0, n_dates do begin		mo=dates(1,i)		if dates(0,i) gt 15 then mo=mo+1		final(i)=dates(2,i)+float(mo)/12	endfor	tmp=round(final*100)	final=float(tmp)/100	return, finalend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads the name of an image file from a meta file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getheader, unit	s=''	readf, unit, s	return, send;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads dates from a meta file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getdates, unit	i=0	s=''	readf, unit, i	if i gt 1 then dates=intarr(3,i) $	else dates=intarr(3)	for j=0, i-1 do begin		readf, unit, s		sep=str_sep(s, ' ')		dates(2,j)=sep(0)		dates(1,j)=sep(1)		dates(0,j)=sep(2)	endforreturn, convertDatesToCent(dates)end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes a number of century output files and krigs them into a map;;	based on the hdr file of a landsat scene;;;;	dates is an array of dates (dd/mm/yy) (3 x years);;	metacent is a meta file that contains the number of century;;		points on the first line, and each successive line;;		has the name of a century file followed by the lat,long;;		of that century point;;	header is the name of an ENVI header fileto get map info from it;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro spatCent, metacent	openr, metaun, /get, metacent	openw, oun, /get, string(metacent+'.out')	npoints=getpoints(metaun)	names=getnames(metaun, npoints)	locations=getloc(metaun, npoints)	centdata=getdata(names, npoints)	utmLoc=convertLLtoUTM(locations);utmLoc=[[-35237.8, 4.44476e+06], [-2759.51, 4.41650e+06] ,[-15103.8, 4.50847e+06] ,[ 91691.8, 4.46657e+06] ,[ 16172.5, 4.48778e+06] ,[-16877.4, 4.46209e+06] ,[ 143276., 4.50476e+06]]	print, utmLoc	header=getheader(metaun)	bounds=headerBounds(header);print, 'Dynamically read =', bounds;	bounds= [-69051.311, 4367255.3,165878.69,4593215.3, 30.000000,30.000000]	centdats=getdates(metaun)	z=fltarr(npoints)	e=[(bounds(2)-bounds(0)),0.5] 		flip=0		;; false	if bounds(1) gt bounds(3) then begin		realbounds=bounds		bounds(1) = bounds(3)		bounds(3) = realbounds(1)		flip=1	  ;;true	endif	print, 'rotated ',flip,' =', bounds	gs=bounds(4:5)*10;for tmp=0.1, 2, 0.1 do begin;	e(1)=tmp^2;	print, e	for i=0, n_elements(centdats)-1 do begin		for j=0, npoints-1 do begin			z(j)=centdata(1,j,where(centdata(0,j,*) eq centdats(i)))	;; aglivc;			z(j)=z(j) + (centdata(2,j,where(centdata(0,j,*) eq centdats(i)))/2)	;; stded		endfor		print, z		res= krig2d(z, transpose(utmLoc(0,*)), transpose(utmLoc(1,*)), gs=gs, bounds=bounds(0:3), expon=e)		print, size(res)		if flip then res=rotate(res,7)	;;mirrors the image about the x-axis		writeu, oun, res		info=size(res)		res=[0b,0b]	endfor;endfor	close, oun, metaun	free_lun, oun, metaun		     ;oldinfo , newfile,	 ns	 nl,	 datatype, nb	setEnviHeader,header, (metacent+'.out'), info(1),info(2),info(3), n_elements(centdats),gsend