;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ENVI must be restored before this will run;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Read file names from a meta file;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function readscene, unit	s=''	readf, unit, s	return, sendfunction readdir, unit	s=''	readf, unit, s	return, sendfunction readkey, unit	s=''	readf, unit, s	return, send;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	reads the locations of century points/files from column 2/3;;	of the metafile which must be set up ahead of time;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getloc, unit, points	locs=fltarr(points, 2)	tmploc=0.	s='';;this restores the file pointer to the begining of the useful info	point_lun, unit, 0	readf, unit, s	for i=0, points-1 do begin		readf, unit, s		sepstr=str_sep(s, ' ')		redstr=sepstr(where(sepstr ne ''))		reads, redstr(1), tmploc		locs(i,0)=Fix(tmploc / 100) + (tmploc mod 100) /60		reads, redstr(2), tmploc		locs(i,1)=Fix(tmploc / 100) + (tmploc mod 100) /60	endfor	return, locsend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes a series of lat long coordinates and converts them;;	to UTM Zone 14 coordinates with the builtin envi routine;;	ENVI_CONVERT_PROJECTION_COORDINATES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function convertLLtoUTM, locations	s=size(locations)	locations(*,1)=locations(*,1)*(-1)	units=envi_translate_projection_units('Degrees')	iproj=envi_proj_create(/geographic, units=units, datum='WGS-84')	units=envi_translate_projection_units('Meters')	oproj=envi_proj_create(/utm, units=units, datum='WGS-84', zone=14)	envi_convert_projection_coordinates, locations(*,1), locations(*,0), iproj, $						newXmap, newYmap, oproj	map=fltarr(2, n_elements(newXmap))	map(0,*)=newXmap	map(1,*)=newYmap	return, mapend;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Takes the name of an ENVI header file and finds the boundaries;;	in map coordinates.  Returns upperleft, lowerright corners;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function headerBounds, headerfile	s=str_sep(headerfile, '.')	name=headerfile	if s(n_elements(s)-1) eq 'hdr' then begin		name=s(0)		if n_elements(s) gt 2 then $			for i=1, n_elements(s)-2 do begin				name=name+'.'+s(i)			endfor	endif			envi_open_file, name, r_fid=fid	if fid eq -1 then begin print, 'Bad Header File' & stop & endif	envi_file_query, fid, h_map=Hmapinfo, ns=ns, nl=nl, xstart=xstart, ystart=ystart	if Hmapinfo eq -1 then begin print, 'Bad Header File' & stop & endif	Handle_Value, Hmapinfo, mapinfo	pixsz=mapinfo.ps	left=mapinfo.mc(2)	top=mapinfo.mc(3)	right=left+(ns*pixsz(0))	bottom=top-(nl*pixsz(1))	envi_file_mng, /remove, id=fid	return, [left, top, right, bottom, pixsz(0), pixsz(1)]end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Replaced by centfiles.pro;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro makeCmodel, meta, weatherdir, weatherkey	scene=meta	if n_elements(dates) eq 0 then begin 		openr, un, /get, meta		scene = readscene(un)		weatherdir = readdir(un)		weatherkey = readkey(un)		close, un & free_lun, un	endif		boundary=headerBounds(scene)	openr, unkey, weatherkey, /get			;list100 input output vars ;dont include .bin or .lis	;century -s <schedule.file> -n <binary.output.file>	