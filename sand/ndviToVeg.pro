;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Reads an enviheader file.  ;;	    returns a struct :;;		    ns:number of samples in the file;;		    nl:number of lines in the file;;		    nb:number of bands in the file;;		    map: an envi map structure (includes utm coords and pixelsize);;		    desc: The description field in the .hdr;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getFileInfo, name	 envi_open_file, name, r_fid=id	 	 if id eq -1 then return, {errorstruct, name:name, ns:-1, nl:-1, nb:-1}	 envi_file_query, id, nb=nb, nl=nl, ns=ns, h_map=maph, descrip=desc, $	 	interleave=interleave, data_type=type	 handle_value, maph, map	 envi_file_mng, id=id, /remove	 return, {imagestruct, name:name, ns:ns, nl:nl, nb:nb, map:map, desc:desc, $	 	interleave:interleave, type:type}end;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Sets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;pro setHdr, info, fname	envi_setup_head, fname=fname, ns=info.ns, nl=info.nl, nb=info.nb, $		interleave=info.interleave, data_type=info.type, $		descrip=info.desc, map_info=info.map, /writeendpro showDescription	print, $';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'   ,$';;	                                                                                       ',$';;	ndviToVeg, fullndvi, veg, mask, n_percent=n_percent                                    ',$';;	                                                                                       ',$';;		Converts an NDVI image into a "vegetation" image by useing the top and bottom  ',$';;			npercent as 100% and 0% cover respectively.  It then interpolates between',$';;			those two for all other NDVI values	                               ',$';;		If there is more than one band in the NDVI image it averages all bands first   ',$';;	                                                                                       ',$';;		fullndvi = and NDVI image with any number of bands, must have an ENVI .hdr     ',$';;		veg		= output file name.  It will be byte, 0-100                    ',$';;		mask		= mask file, single band byte with same NSamples and NLines as fullndvi',$';;		n_percent= The top and bottom percent NDVI used as 0% and 100% veg cover.      ',$';;				  if not specified 2% will be used.                            ',$';;	                                                                                       ',$';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'	retallend;;Compute the veg percent based on the min and max NDVI values and ;;	write it to an output filepro makeVeg, meanNDVI, veg, min, max, info		openr, un, meanNDVI, /get	openw, oun, veg, /get		start=info.ns/10 * 3	endin=info.ns/10 * 4	print, info.type	for j=0, info.nb-1 do begin		line=make_array(info.ns, 100,type=info.type)		outline=bytarr(info.ns, 100)			for i=0, (info.nl/100)-1 do begin			readu, un, line;;convert to % cover why divide by 2!!??			outline = byte((float(line - min)/(max-min))*100)/2	;;	just a little error checking, less than 0 = 0, gt 100 = 100			index=where(line lt min and line ne 0)			if index(0) ne -1 then outline(index) = 1			index=where(line gt max)			if index(0) ne -1 then outline(index) = 100				writeu, oun, byte(outline)		endfor				if info.nl mod 100 ne 0 then begin			line=make_array(info.ns, (info.nl mod 100),type=info.type)			outline=bytarr(info.ns, (info.nl mod 100))						readu, un, line;;convert to % cover why divide by 2!!??			outline = ((float(line - min)/(max-min))*100)/2;;	just a little error checking, less than 0 = 0, gt 100 = 100			index=where(line lt min and line ne 0)			if index(0) ne -1 then outline(index) = 1			index=where(line gt max)			if index(0) ne -1 then outline(index) = 100				writeu, oun, byte(outline)		endif	endfor		close, oun, un	free_lun, oun, un	info.type=1	setHdr,info,vegend;;all files must be registered, same ns,nl, NDVI can be byte or floatpro ndviToVeg, fullndvi, veg, maskfile, n_percent=n_percent, useMean=useMean		envistart		if n_elements(maskfile) eq 0 or n_elements(veg) eq 0 or $		n_elements(fullndvi) eq 0 then showDescription	if not keyword_set(n_percent) then n_percent=0.02	if n_percent gt 1 then n_percent=n_percent/100.		meanNDVI='ndvimeantmp'	info=getFileInfo(fullndvi)	openr, mun, /get, maskfile	openr, un, /get, fullndvi	openw, oun, /get, meanNDVI		offset=info.ns*info.nl		hist=lonarr(256)	bandhist=lonarr(256, info.nb)	tmp =make_array(info.ns*100,info.nb,type=info.type)	mask=bytarr(info.ns*100)			for i=0, (info.nl/100)-1 do begin		line=make_array(info.ns*100,type=info.type);;read in 100 line for all bands		for j=0, info.nb-1 do begin			point_lun, un,offset*j + (i*info.ns*100)			readu, un, line			tmp(*,j)=line		endfor;;compute the average line 		line=lonarr(info.ns*100)		for j=0,info.nb-1 do begin			line=line+tmp(*,j)		endfor		line=line/info.nb		realveg = byte(line)						readu, mun, mask		index = where(mask eq 0)		if index(0) ne -1 then $			realveg(index) = 0					writeu, oun, realveg		;;find the histogram of this line and add it to the total			;;If BYTE		if info.type eq 1 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=255,binsize=1)			endif	;;If FLOAT		endif else if info.type eq 4 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=1,binsize=0.004)			endif	;;If INTEGER		endif else if info.type eq 2 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=10000,binsize=(10000/256.))			endif		endif else begin			print, 'Can not make a vegetation map from an NDVI image of type :', info.type			retall		endelse			endfor	if info.nl mod 100 ne 0 then begin		tmp =make_array(info.ns*(info.nl mod 100),info.nb,type=info.type)		mask=bytarr(info.ns*(info.nl mod 100))				line=make_array(info.ns*(info.nl mod 100),type=info.type);;read in 100 line for all bands		for j=0, info.nb-1 do begin			point_lun, un,offset*j + (info.ns*(info.nl - (info.nl mod 100)))			readu, un, line			tmp(*,j)=line		endfor;;compute the average line 		line=lonarr(info.ns*(info.nl mod 100))		for j=0,info.nb-1 do begin			line=line+tmp(*,j)		endfor		line=line/info.nb		readu, mun, mask		index = where(mask eq 0)				realveg = byte(line)				if index(0) ne -1 then $			realveg(index) = 0				writeu, oun, realveg;;find the histogram of this line and add it to the total			;;If BYTE		if info.type eq 1 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=255,binsize=1)			endif	;;If FLOAT		endif else if info.type eq 4 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=1,binsize=0.004)			endif	;;If INTEGER		endif else if info.type eq 2 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=10000,binsize=(10000/256.))			endif		endif else begin			print, 'Can not make a vegetation map from an NDVI image of type :', info.type			retall		endelse	endif				close, oun, mun, un	free_lun, mun, oun, un;;now find the min and max 2% of the histogram	full=float(total(hist))	if full gt 10 then begin		min=0	i=0	while min lt n_percent do begin		min=min+hist(i)/full		i=i+1	endwhile	min = i-1		max=0	i=255	while max lt n_percent do begin		max=max+hist(i)/full		i=i-1	endwhile	max=i+1		if info.type eq 4 then begin		min=min/255.		max=max/255.	endif	print, 'NDVI bounds= ',min, max	print, 'Useful pixels=',full	endif else begin		min = 0.2		max = 0.8	endelse		info.nb=1	if not keyword_set(useMean) then info.type=1	makeVeg, meanNDVI, veg, min, max, info		if file_test(meanNDVI) then $		file_delete, meanNDVIend;;all files must be registered, same ns,nl, NDVI can be byte or floatpro multiNdviToVeg, fullndvi, veg, mask, n_percent=n_percent		envistart		if n_elements(fullndvi) eq 0 then showDescription	if not keyword_set(n_percent) then n_percent=0.02	if n_percent gt 1 then n_percent=n_percent/100.		info=getFileInfo(fullndvi)	openr, mun, /get, mask	openr, un, /get, fullndvi		offset=info.ns*info.nl		hist=lonarr(256)	bandhist=lonarr(256, info.nb)	tmp =make_array(info.ns,info.nb,type=info.type)	mask=bytarr(info.ns)	start=info.ns/10 * 3	endin=info.ns/10 * 4;	tmpdisplay=lonarr(endin-start, 500)			for i=0, info.nl-1 do begin		line=make_array(info.ns,type=info.type);;read in a single line for all bands		for j=0, info.nb-1 do begin			point_lun, un,offset*j + i*info.ns			readu, un, line			tmp(*,j)=line		endfor;;compute the average line 		line=lonarr(info.ns)		for j=0,info.nb-1 do begin			line=line+tmp(*,j)		endfor		line=line/byte(info.nb);;find the histogram of this line and add it to the total				readu, mun, mask		if info.type eq 1 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=255,binsize=1)				for j=0,info.nb-1 do begin					bandhist(*,j)=bandhist(*,j)+histogram((tmp(*,j))(index), $						min=0,max=255,binsize=1)				endfor			endif		endif else if info.type eq 4 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=1,binsize=0.004)				for j=0,info.nb-1 do begin					bandhist(*,j)=bandhist(*,j)+histogram((tmp(*,j))(index), $						min=0,max=1,binsize=0.004)				endfor			endif		endif else if info.type eq 2 then begin			index = where(mask ne 0)			if index (0) ne -1 then begin				hist=hist+histogram(line(index), min=0,max=10000,binsize=(10000/256.))				for j=0,info.nb-1 do begin					bandhist(*,j)=bandhist(*,j)+histogram((tmp(*,j))(index), $						min=0,max=10000,binsize=(10000/256.))				endfor			endif		endif else begin			print, 'Can not make a vegetation map from an NDVI image of type :', info.type			retall		endelse			endfor	close, oun, mun, un	free_lun, mun, oun, un	for i=0, info.nb-1 do begin		plot, bandhist(*,i)		wait, 5	endfor;;now find the min and max 2% of the histogram	full=float(total(hist))	if full gt 10 then begin		for j=0, info.nb-1 do begin		min=0		i=0		while min lt n_percent do begin			min=min+bandhist(i,j)/full			i=i+1		endwhile		min = i-1				max=0		i=255		while max lt n_percent do begin			max=max+bandhist(i,j)/full			i=i-1		endwhile		max=i+1			if info.type eq 4 then begin			min=min/255.			max=max/255.		endif		if info.type eq 2 then begin			min=min*39			max=max*39		endif		print, ' '		print, 'For Band :',j		print, 'NDVI bounds= ',min, max		print, 'Useful pixels=',full	endfor		min=0	i=0	while min lt n_percent do begin		min=min+hist(i)/full		i=i+1	endwhile	min = i-1		max=0	i=255	while max lt n_percent do begin		max=max+hist(i)/full		i=i-1	endwhile	max=i+1		if info.type eq 2 then begin		min=min*39		max=max*39	endif	if info.type eq 4 then begin		min=min/255.		max=max/255.	endif	print, 'For the Mean'	print, 'NDVI bounds= ',min, max	print, 'Useful pixels=',full	endif else begin		min = 0.2		max = 0.8	endelse	makeVeg, fullndvi, veg, min, max, info		end