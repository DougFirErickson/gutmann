;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	Gets envi header info (map and ns, nl, nb, type, interleave);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;function getmapinfo,  line  tmp=strsplit(line,',',/extract)  xoff = 0D  yoff = 0D  xloc = 0D  yloc = 0D  px = 0D  py = 0D    reads,  tmp(1), xoff &  reads,  tmp(2), yoff  reads,  tmp(3), xloc &  reads,  tmp(4), yloc  reads,  tmp(5), px   &  reads,  tmp(6), py  ;;for compatibility with ENVI map struct put it in;; these variable names  return,  {mc:[xoff, yoff, xloc, yloc], ps:[px, py]}endpro updateInfo, info, line, un  line = strsplit(line, ' = ', /extract)  case line(0) of    'samples': 		info.ns = long(line(1))    'lines': 		info.nl = long(line(1))    'bands': 		info.nb = long(line(1))    'description': 	info.desc = line(1)+getDesc(un, line)    'interleave': 	info.interleave = bandorder(line(1))    'data type':	info.type = long(line(1))    'map info':		info.map = getMapData(line)      endcase  returnendfunction getImageInfo, name  hdrname = name+'.hdr'  if not file_exist(hdrname) then return, -1  mapinfo = {mapinfostruct, zone:0l}  info = {fileInfo, ns:0l, nl:0l, nb:0l, map:mapinfo,		$			interleave:0l, type:0l, desc:desc}  openr, un, /get, hdrname  line = ' ' & readf,  un,  line  while not eof(un) do begin    updateinfo, info, line    readf, un, line  endwhile  ;      envi_open_file, name, r_fid=id;      if id eq -1 then return, -1     ; 	envi_file_query, id, ns=ns, nl=nl, nb=nb, h_map=maph,	$; 		interleave=interleave, data_type=type, descrip=desc; 	handle_value, maph, mapinfo	; 	envi_file_mng, id=id, /remove		return, infoendpro setHdr, info, fname	envi_setup_head, fname=fname, ns=info.ns, nl=info.nl, nb=info.nb, $		interleave=info.interleave, data_type=info.type, $		descrip=info.desc, map_info=info.map, /writeend	pro applymasks, mask2, in, out;	m1info=getImageInfo(mask1)	m2info=getImageInfo(mask2)	ininfo=getImageInfo(in)	if m2info.ns ne ininfo.ns or m2info.nl ne ininfo.nl then begin		print, 'ERROR, files do not match', ininfo, m2info		return	end;	openr, un1, mask1, /get	openr, un2, mask2, /get	openr, un3, in, /get	openw, oun, out, /get			m=make_array(m2info.ns, type=m2info.type)	n=make_array(ininfo.ns, type=ininfo.type)	for j=1, ininfo.nb do begin	for i=1, m2info.nl do begin		readu, un2, m		readu, un3, n		index = where(m eq 0)		if index(0) ne -1 then $			n(index) = 0		writeu, oun, n	endfor	point_lun, un2, 0	endfor	close, oun, un3, un2 & free_lun, oun, un2, un3	setHdr, ininfo, out      end